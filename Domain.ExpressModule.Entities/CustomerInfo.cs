//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.ExpressModule.Entities
{
    [DataContract(IsReference = true)]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class CustomerInfo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string UniqueId
        {
            get { return _uniqueId; }
            set
            {
                if (_uniqueId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UniqueId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _uniqueId = value;
                    OnPropertyChanged("UniqueId");
                }
            }
        }
        private string _uniqueId;
    
        [DataMember]
        public string Csr_Name
        {
            get { return _csr_Name; }
            set
            {
                if (_csr_Name != value)
                {
                    _csr_Name = value;
                    OnPropertyChanged("Csr_Name");
                }
            }
        }
        private string _csr_Name;
    
        [DataMember]
        public string Csr_Tel
        {
            get { return _csr_Tel; }
            set
            {
                if (_csr_Tel != value)
                {
                    _csr_Tel = value;
                    OnPropertyChanged("Csr_Tel");
                }
            }
        }
        private string _csr_Tel;
    
        [DataMember]
        public string Csr_Addr
        {
            get { return _csr_Addr; }
            set
            {
                if (_csr_Addr != value)
                {
                    _csr_Addr = value;
                    OnPropertyChanged("Csr_Addr");
                }
            }
        }
        private string _csr_Addr;
    
        [DataMember]
        public string Csr_AddrDetail
        {
            get { return _csr_AddrDetail; }
            set
            {
                if (_csr_AddrDetail != value)
                {
                    _csr_AddrDetail = value;
                    OnPropertyChanged("Csr_AddrDetail");
                }
            }
        }
        private string _csr_AddrDetail;
    
        [DataMember]
        public string Csr_PostCode
        {
            get { return _csr_PostCode; }
            set
            {
                if (_csr_PostCode != value)
                {
                    _csr_PostCode = value;
                    OnPropertyChanged("Csr_PostCode");
                }
            }
        }
        private string _csr_PostCode;
    
        [DataMember]
        public Nullable<int> Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private Nullable<int> _status;
    
        [DataMember]
        public string WeChat_Id
        {
            get { return _weChat_Id; }
            set
            {
                if (_weChat_Id != value)
                {
                    _weChat_Id = value;
                    OnPropertyChanged("WeChat_Id");
                }
            }
        }
        private string _weChat_Id;
    
        [DataMember]
        public Nullable<System.DateTime> CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private Nullable<System.DateTime> _createTime;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
